# A simple C/C++ Continuous Integration file
name: MiniPaint CI

# This action is pushed on any push to a specific branch,
# in this case, the master branch, although you could add others.
on:
  push:
    branches: [ main ]
    
# Every github action needs at least one job.
# We could have multiple jobs, but for now I am only going to include one here.
jobs:
  build_and_test_minipaint: # This is the name of our job, and you will see it in the 'Actions' tab.
    # We can have our integration tests run on multiple operating systems in 'containers'
    # that are hosted on github. You can create your own as well, or setup a 'container'
    # using a tool like docker if you like. For now, I am going to show you the ubuntu setup.
    # Available environments are here: https://github.com/actions/virtual-environments
    runs-on: ubuntu-18.04
    # These are the steps that will be run every time that we run our script, one will follow
    # the other.
    # You can pretend you would be manually be typing these out in the terminal everytime you did
    # a 'push' before.
    steps:
      - uses: actions/checkout@v2
      - name: Quick check to see where we are and who we are.
        run: pwd && whoami && ls -l
      # For us, we need to setup our linux box which only takes a few moments
      - name: Update packages on linux
        run: sudo apt-get update
      - name: Install sfml
        run: sudo apt-get install libsfml-dev
      - name: Build project makefile
        run: cd ./FinalProject && cmake .
      - name: Run project makefile
        run: cd ./FinalProject && make
      # These next two steps need a little bit more explaining, because as we are finding out
      # testing graphics applications is really hard!
      # You learned this when you wrote your GUI applications tests earlier.
      # First and foremost, make sure your tests terminate at some point, otherwise they will run forever
      # and we will never finish this test!
      # Second, since we are running our code on github.com, we do not have a 'window', so we need
      # to install some tools that emulate having an actual desktop window to run our program in.
      # 'xvfb ' is one such tool, and you can see how I have set it up below.
      - name: Setup headless x11 window
        run: sudo apt-get install xvfb xorg xauth openbox # xorg is needed to set DISPLAY variable later
      - name: Run graphical application tests in headless mode
        run: cd ./FinalProject && xvfb-run --server-args="-screen 0 1024x768x24" ./App_Test
      - name: Run the server test
        run: cd ./FinalProject && ./Server_Test
      # Run cppcheck for all the files in ./src
      - name: Install cppcheck
        run: sudo apt-get install cppcheck
      - name: Run cppcheck
        run: cd ./FinalProject/src && cppcheck --enable=all *.cpp
